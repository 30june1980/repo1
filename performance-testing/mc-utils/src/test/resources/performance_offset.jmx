<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Mission Control Performance Test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">missioncontrol-tst.uhg.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="uhg-test-server" elementType="Argument">
            <stringProp name="Argument.name">uhg-test-server</stringProp>
            <stringProp name="Argument.value">missioncontrol-tst.uhg.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="counterStartValue" elementType="Argument">
            <stringProp name="Argument.name">counterStartValue</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="processRequestsThroughput" elementType="Argument">
            <stringProp name="Argument.name">processRequestsThroughput</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">500</stringProp>
          </elementProp>
          <elementProp name="processCount" elementType="Argument">
            <stringProp name="Argument.name">processCount</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">600</stringProp>
          </elementProp>
          <elementProp name="searchCount" elementType="Argument">
            <stringProp name="Argument.name">searchCount</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="searchRequestsThroughput" elementType="Argument">
            <stringProp name="Argument.name">searchRequestsThroughput</stringProp>
            <stringProp name="Argument.value">45</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">90</stringProp>
          </elementProp>
          <elementProp name="postStatusCount" elementType="Argument">
            <stringProp name="Argument.name">postStatusCount</stringProp>
            <stringProp name="Argument.value">1200</stringProp>
            <stringProp name="Argument.desc">1200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="postStatusThroughput" elementType="Argument">
            <stringProp name="Argument.name">postStatusThroughput</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1000</stringProp>
          </elementProp>
          <elementProp name="cancelReqCount" elementType="Argument">
            <stringProp name="Argument.name">cancelReqCount</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">300</stringProp>
          </elementProp>
          <elementProp name="cancelReqThroughput" elementType="Argument">
            <stringProp name="Argument.name">cancelReqThroughput</stringProp>
            <stringProp name="Argument.value">250</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">250</stringProp>
          </elementProp>
          <elementProp name="archiveCount" elementType="Argument">
            <stringProp name="Argument.name">archiveCount</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">600</stringProp>
          </elementProp>
          <elementProp name="archiveThroughput" elementType="Argument">
            <stringProp name="Argument.name">archiveThroughput</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">500</stringProp>
          </elementProp>
          <elementProp name="findFulfillmentHistoryCount" elementType="Argument">
            <stringProp name="Argument.name">findFulfillmentHistoryCount</stringProp>
            <stringProp name="Argument.value">120</stringProp>
            <stringProp name="Argument.desc">120</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="findFulfillmentHistoryThroughput" elementType="Argument">
            <stringProp name="Argument.name">findFulfillmentHistoryThroughput</stringProp>
            <stringProp name="Argument.value">90</stringProp>
            <stringProp name="Argument.desc">180</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">50</stringProp>
          </elementProp>
          <elementProp name="processRunUuid" elementType="Argument">
            <stringProp name="Argument.name">processRunUuid</stringProp>
            <stringProp name="Argument.value">2711_2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1311_1</stringProp>
          </elementProp>
          <elementProp name="cancelRunUuid" elementType="Argument">
            <stringProp name="Argument.name">cancelRunUuid</stringProp>
            <stringProp name="Argument.value">2711_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="postArchiveRunUuid" elementType="Argument">
            <stringProp name="Argument.name">postArchiveRunUuid</stringProp>
            <stringProp name="Argument.value">2711_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">1311_1</stringProp>
          </elementProp>
          <elementProp name="archiveFileCount" elementType="Argument">
            <stringProp name="Argument.name">archiveFileCount</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="archiveFileName" elementType="Argument">
            <stringProp name="Argument.name">archiveFileName</stringProp>
            <stringProp name="Argument.value">archive_</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="archiveFileExtension" elementType="Argument">
            <stringProp name="Argument.name">archiveFileExtension</stringProp>
            <stringProp name="Argument.value">.afp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fulfillmentHistoryUuid" elementType="Argument">
            <stringProp name="Argument.name">fulfillmentHistoryUuid</stringProp>
            <stringProp name="Argument.value">2711_2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accessToken" elementType="Argument">
            <stringProp name="Argument.name">accessToken</stringProp>
            <stringProp name="Argument.value">eyJjdHkiOiJhcHBsaWNhdGlvblwvSlNPTiIsImFsZyI6IlJTMjU2In0.eyJ0b2tlbiI6IkI2Mk90YWkyb2tEYUhtQUdyVlI2ZFc1UkxGQXpuK2ErZnJ2Z2FwTDg4eWh4dHU0UERNbGpycVBDSDFGLzJSUVkraFdzT2JMc1RRb1JGWWJmbWFlVlBmVUhZd0F5MHFvK2FxMnQzUXhRZFVMUDc5VVQ5NnpNME84UHpjWG9tTVhhZWdlWms2eDdSRkRVZ0dQNVZhMk9EeHVrb2tpc3duMFZMQzhsa3RYenhRa2NPbXE3dUU4WlU1bVNLM2FabHc4MXVuaVlPMnNuTUoyYTdFcmtNeWg2a0lZT1F4ZUh3UHdySHUrclYxaWpkWGZxckNnZjhNOEtTa0V4OWlIWXJydHB2eEtpZGtvVTQ3V2k4Rm10UkswejJKOXRVbzVucm8wQmF6b25SQWhDMEYxbGhialVnVU1VaExDbVlqZnp4bk9LU2NsS2Q1b2VzdGRIMmhwNVllVTBIcEpQb1p4a3Rub0c0STkxYnBPRVZtSUJacHFqZWpwV3pFblljNSsycHBqK0h5M1JoWlNLc3RKcHNsRzhMckVnNCtHNDVGbVN5Uk1DSkNxL3YvNWdaQ1JnUXlBSllvdzl6cUVKRUNRcUN6Nnh2RlR1ZkIvUU0vYWd3SmR6MnpBa3huVUFDOGl2Q2ZLQktuVnBIaC8vLzBta0djZEFKR1VRYU9UZTlDZXJ0S092OUZlMXJ4ZTVIcDJobW1nL3gySHlEOEhUTU1iQWxxYmVmdUU5RnltY1RoYXhuUDRuTVZrUTd3YlpVL2V5Y296RCtwZXI2dHM3Ti83Y2xvMTVYd2Y0Nld3QlU0aFVlakhMOG1tM291cUFKaHlGR29XOEROcVlwUTdyUEptTmtrMndQNHFGd2tsRUMyaGdNQS8rSktZUHI3aTBTbURiOFNVNU5wK2UzQ2FBdVdTQWNjcW1OQTRBdGExcWZIakRpcnN3ejgySyt0MnpJZ0wwNjFRN0FZdUd2QytrSmlVZEhKazVUc0dLUmVvd1BGUW1lNzJGTk1LYW9kR2hqNXp5SndzSWdNWTRpOER2MlZKRVBRaEY3eUJVNnpGcWpVYUhuV3Zxa2Vycm5VOTdNdi9yci9XQmRaMlc4NkY3U3liS1B4Z3MrMml2K0UwUlBzZ2FsSW56WUQwaDZNeWh2ZGhHRUxlMkFFUEdJWFpKOFhGL1k0enNJL2NpRUUwa1BoQldiWXpUTE1CQ0lDanRueitLKysrMGVka2dHWG8wUFk5dGVtU0t0dFBIUnBDVXhMNlNYVEJPSGRyd01IMkk1Z2ltOVhVZTV5RVR4Yk4wMExZWXJ0ME42YWNlQmlhZmgzeHBGWFlWWXp4YkhyZ0c0WlJWUkxMNjhZZ0RaeFZKQXV0THZ1Y2Q3WXdyT1lLTTJFTmRYa0RFRmhmTWZhaTM3OGR6NDBPR1dpa3p5SkN0czFVeXRLSGx5RWtFMElndXVnUW9KZmFuWmxldU4ycmp6cmtDYjJ0blo1TVhqQVMrN3gvMFhNSytlOG9zaVhRS1V0dHd6WjNRaG9PSXpQMit4V3pPSGdIalErbTduLzU0OVBSMG4rTVNZZjJ3NUJVUUovTndrRXhmUktVcTl5dUpzWUw3YjgwaDZONkRhUHE4R2xza0drNW0xWXdqeU9vaWJybHY1RHdGUDhaRmN1Z09BY2V5R0ZCVjdzSUgyRXpwTkNqUG55VHpHYWdNNEFSOENCdDRLcS9DM2dlYWRjVmFNa3hqbHduNGtsWEhuaW1NRitoSExJa2RqR2lGd25POFVqcHFQa1d0OU5EYWppVitCS0xvWFhwbnNWNFBRSlhEeUU2U0hkU1VCc2ltZGRydUhLWjdnMkJMZ0htcXRvK1VWNzZ6T3JlcWhtSjBMOVp5ZVFvUEtXNW05VWppVUNCRkhPWURjR0tyZmtETkNFY1dxWjJQakM4czhTaERmWm1OUGZyazRKS0ZGS3VmaEo0bkdFdDZLM0lQK0QzTUg5WVJTU1ZxNzFaSVJSMFlMRU9ETTdsQkRaYkRQTTZaY285NnYxZ05BclJjVTNjSU0zWDNpR2xlWG1qWHFONzRNV0VWVW1oSTNCK3dzdWExaFFzY0xyWWs3YWdST1Z5OWNZS2J4bGRISEYxQkpqY0Ztd3drL1F2enZCMXAiLCAiaXYiOiJYcHp1SDlzYTQyejV6OFl1K3dJVC9RPT0iLCAibWF4RXhwaXJhdGlvblRpbWUiOiIxNTA5NzM1MTU3MzM3In0.mEvhPlvFxWKn4a67rwThFWH-q2ARhCIBefB8MWQE-iuJmcD994Qfcv6_p2fu-4AXGl6CmM4BsL_bt6qkou3-QjzeAFsqLQOyuaDstG_i_zb2paS3lMOQj0BFv0Rd1p-XUpbIoBB0ch6_pw9o5De7zCB5xGMRDxgjeuHPojR23J8_K9SsBPg5t7hvUkFfsnQNMbMSxxl7QwvcRh4snVsq8aMEFKMQLQO10e4Amk4s0BvqGb5lAtGbQofIu8HW1gsa5IMdVMTfLE0wL-nnIz1oKBpr_nT1IPpL5TbHxLZ0XKl9UMDxboLoPMkKb7wQcMFT9TyHqb_H5OdP9YrjyK12pw</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="archiveReqStartOffset" elementType="Argument">
            <stringProp name="Argument.name">archiveReqStartOffset</stringProp>
            <stringProp name="Argument.value">60000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cancelReqStartOffset" elementType="Argument">
            <stringProp name="Argument.name">cancelReqStartOffset</stringProp>
            <stringProp name="Argument.value">90000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="postReqStartOffset" elementType="Argument">
            <stringProp name="Argument.name">postReqStartOffset</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">For 105000 process: 60000 post ,30000 archive, 15000 cancel</stringProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/xml</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">saml</stringProp>
            <stringProp name="Header.value">PHNhbWwyOkFzc2VydGlvbiBWZXJzaW9uPSIyLjAiIElEPSJTYW1sQXNzZXJ0aW9uLTU2ZWI2MDc2YTNjMmVjNGE2MWNjZTlmOWI4MDg0ODJhIiBJc3N1ZUluc3RhbnQ9IjIwMTctMDktMjhUMDg6MDc6MTcuOTI5WiIgeG1sbnM6c2FtbDI9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPjxzYW1sMjpJc3N1ZXIgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDplbnRpdHkiPmFwaS1pbnQtc3RnLnVoYy5jb208L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI1NhbWxBc3NlcnRpb24tNTZlYjYwNzZhM2MyZWM0YTYxY2NlOWY5YjgwODQ4MmEiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz48L2RzOlRyYW5zZm9ybXM+PGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+PGRzOkRpZ2VzdFZhbHVlPkdwRHpPUEJRcjBxZTNTN1lyNnF0NDZBY05xTT08L2RzOkRpZ2VzdFZhbHVlPjwvZHM6UmVmZXJlbmNlPjwvZHM6U2lnbmVkSW5mbz48ZHM6U2lnbmF0dXJlVmFsdWU+Vk1QTjNubU1BcUo5Z1BoamU4RjNYVEk1TkdEcloxcDE4MWhMb2EzdVU3dVJ5cEdGRnBRcElqSkhodHQ1T0EzQTJRc1BSa05QMmpYTlpReXNGTHdrTVMyaFZyVktXcndqb2pGeDkzWjNjdGhiNUNzbVJNdm9FNldsT0JHcU1yRjNmZ1NRZ3cxZ1lEMTJTbGxzOFF3SmY2WjdqSEJzNUtZaWI4RnFPY3RINzd0LzJ2N1diZDVOUC9TMXRRWDZOZFA5a0ZiYXA1QUJndm5aa2lhSWI5YU1RZ21EZkFzbWp1NVJSWEpTeTNPN0hINjYvTXd2UWZsVjJZVVdQMzhIVWVQbHNtK1FQVmxQVzB2K2RUdXhTZEI3MHZiRVdxMEdRSzNFT0J6Q3Z1SXZhTWtZYkdZNzBibVRnKzR5UENMVllmTVFWZnZpeUNFcHJnbkMzY2JiTEMyeHZnPT08L2RzOlNpZ25hdHVyZVZhbHVlPjxLZXlJbmZvIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48WDUwOURhdGE+PFg1MDlTdWJqZWN0TmFtZT5DTj1hcGktaW50LXN0Zy51aGMuY29tLE9VPURBUFMsTz1Vbml0ZWRIZWFsdGggR3JvdXAgSW5jLixMPVBseW1vdXRoLFNUPU1pbm5lc290YSxDPVVTPC9YNTA5U3ViamVjdE5hbWU+PFg1MDlDZXJ0aWZpY2F0ZT5NSUlIekRDQ0JiU2dBd0lCQWdJS0p0REU5UUFCQUFEOWJ6QU5CZ2txaGtpRzl3MEJBUVVGQURCN01STXdFUVlLQ1pJbWlaUHlMR1FCR1JZRFkyOXRNUk13RVFZS0NaSW1pWlB5TEdRQkdSWURkV2hqTVJJd0VBWUtDWkltaVpQeUxHUUJHUllDWkhNeEVqQVFCZ29Ka2lhSmsvSXNaQUVaRmdKdGN6RW5NQ1VHQTFVRUF4TWVWVzVwZEdWa1NHVmhiSFJvSUVkeWIzVndJRWx6YzNWcGJtY2dRMEV6TUI0WERURTNNRGN5TURFMk16SXhORm9YRFRFNE1EY3lNREUyTXpJeE5Gb3dnWU14Q3pBSkJnTlZCQVlUQWxWVE1SSXdFQVlEVlFRSUV3bE5hVzV1WlhOdmRHRXhFVEFQQmdOVkJBY1RDRkJzZVcxdmRYUm9NU0F3SGdZRFZRUUtFeGRWYm1sMFpXUklaV0ZzZEdnZ1IzSnZkWEFnU1c1akxqRU5NQXNHQTFVRUN4TUVSRUZRVXpFY01Cb0dBMVVFQXhNVFlYQnBMV2x1ZEMxemRHY3VkV2hqTG1OdmJUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5lampkdFhtMkpZaWl6K01mTVM0SkVaV1NicXNtcVN6V1Bid1dBd0g2VERhdmcwSjhmaVFBWU5hdVhkb29iaGZhdVJCcWJqblpCQ3FJNGJXK2U1emFSaVI5WFg0dWhWTmxlSFlZbk9SNDU1Z3REQTZ6aW1GajlYT3pDU3g1SFJYek9YbU8vSzNuNmNqaFhoeEZuMDc2L0tUVmU2dmxDSUxvYUc5ZnMwVDdwVjRSM3NZeDdkNDhTYWwwQVdmL2p4K0xQYXFoR0lLa0ViTGNsMFVDNFRUeVI3S3hoazN0ejVMVHMyekpPbWNDcWV0YXVvVkw1cE1yejdCVlB2Z3EzK2Z5QXdJUHFzRkR1TCs5WmlUN3FEcHRTblFoREI0SFMzRmNhbkQyNWpoYTFRSTljM1Jra0NpK2VjSW5rZTBzRDFRQ3RRQm4vb0ZhajdRbWkxbDJGTzdZTUNBd0VBQWFPQ0EwY3dnZ05ETUI0R0ExVWRFUVFYTUJXQ0UwRlFTUzFKVGxRdFUxUkhMbFZJUXk1RFQwMHdIUVlEVlIwT0JCWUVGTWYydkNSL0szdWsySkpjWXd1L08yYkdjRng4TUI4R0ExVWRJd1FZTUJhQUZKekxQRUh3OVl1cUVEZDMwMHloTFYyVFRqbFZNSUlCTFFZRFZSMGZCSUlCSkRDQ0FTQXdnZ0Vjb0lJQkdLQ0NBUlNHUUdoMGRIQTZMeTlqY214a2FYTjBNUzUxYUdNdVkyOXRMMVZ1YVhSbFpFaGxZV3gwYUNVeU1FZHliM1Z3SlRJd1NYTnpkV2x1WnlVeU1FTkJNeTVqY215R2djOXNaR0Z3T2k4dkwwTk9QVlZ1YVhSbFpFaGxZV3gwYUNVeU1FZHliM1Z3SlRJd1NYTnpkV2x1WnlVeU1FTkJNeXhEVGoxaGNITmxjREF6TlRrc1EwNDlRMFJRTEVOT1BWQjFZbXhwWXlVeU1FdGxlU1V5TUZObGNuWnBZMlZ6TEVOT1BWTmxjblpwWTJWekxFTk9QVU52Ym1acFozVnlZWFJwYjI0c1JFTTlaSE1zUkVNOWRXaGpMRVJEUFdOdmJUOWpaWEowYVdacFkyRjBaVkpsZG05allYUnBiMjVNYVhOMFAySmhjMlUvYjJKcVpXTjBRMnhoYzNNOVkxSk1SR2x6ZEhKcFluVjBhVzl1VUc5cGJuUXdnZ0ViQmdnckJnRUZCUWNCQVFTQ0FRMHdnZ0VKTUdjR0NDc0dBUVVGQnpBQ2hsdG9kSFJ3T2k4dlkzSnNaR2x6ZERFdWRXaGpMbU52YlM5aGNITmxjREF6TlRrdWJYTXVaSE11ZFdoakxtTnZiVjlWYm1sMFpXUklaV0ZzZEdnbE1qQkhjbTkxY0NVeU1FbHpjM1ZwYm1jbE1qQkRRVE1vTVNrdVkzSjBNSUdkQmdnckJnRUZCUWN3QW9hQmtHeGtZWEE2THk4dlEwNDlWVzVwZEdWa1NHVmhiSFJvSlRJd1IzSnZkWEFsTWpCSmMzTjFhVzVuSlRJd1EwRXpMRU5PUFVGSlFTeERUajFRZFdKc2FXTWxNakJMWlhrbE1qQlRaWEoyYVdObGN5eERUajFUWlhKMmFXTmxjeXhEVGoxRGIyNW1hV2QxY21GMGFXOXVMRVJEUFdSekxFUkRQWFZvWXl4RVF6MWpiMjAvWTBGRFpYSjBhV1pwWTJGMFpUQUxCZ05WSFE4RUJBTUNCTEF3UEFZSkt3WUJCQUdDTnhVSEJDOHdMUVlsS3dZQkJBR0NOeFVJaFlYdUNvSHE4Z2FHK1pNVnVwOE9nc1R4Zm9GYWhiWERCcHV4WkFJQlpBSUJEVEFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQWdZSUt3WUJCUVVIQXdFd0p3WUpLd1lCQkFHQ054VUtCQm93R0RBS0JnZ3JCZ0VGQlFjREFqQUtCZ2dyQmdFRkJRY0RBVEFOQmdrcWhraUc5dzBCQVFVRkFBT0NBZ0VBTFZ2QWJpWUVBbUdUTStJQktFek5IN3B1bSt6cnF0UVFwRzZWL3NPcnQ0WUxGWDU3OURXdU1pdnROQkVqUWNOOHJqNkQ5VUFGSzE5c24xRXFBRUxKNHdLbklEQnJJb25aZU16UFpBZW9KRWxwN1ZwcW0rYTV4SDJaSEluU3hqWk1xM09xdlVnb1NVZDMyejJDU1dCMTFuRnl6TEFpNUt2bGYwUDVVdThGNU9kRnBEbHBGVTlUL2pEMXhFTWw1d3pUMEQ4cEZSbmd3TWgxZStEN2JhdkxUa2Q5M1krUk9tWHZjY1FyL25aS3o1QjhobDlRT0lhQ1VsSXhaalFDaWU0MVdxMmNlWUt3bENLcGRBVVZGRzIzODE1NW5MNExlR0pocHhOb1I3Z29sZGRIQzNrMWt2eG9lRkZKWWZhQ2x4V3dsZmp2UDYzbnpzNmdsRmNxNWZ1K2d4T0REZ1BLSmFaL2IvcDA3TUVwWkpHZG81bmVPbDU2K05ENkxyNUVLaFdsTlBYVnFWdzVQOHF3czdlV1NvRE9jN3AvS2cxUXRTTnZWMXNOWVNFaUJlMDQ2MHNqS05FN1kxNm0rWGF6Wi83aEVFTHZ6RzE0OXRES2JkSTIrNUdHUUhWVm5pdVRZdVdQQWZESS9wYVhVQnptR2hQWURFNytneCtadi8rV2VTYTZxYmkyNlF5bWRUZ29icHJPSld6MW1HellNcTJuZnJHUDRNWlM4ZjNOZnhTcDZwamNKNWNaaC9URFN4YlBrU0RLVTArbWJKSTZGSGttTkNFbGFZZXRZRGlsYS9lV2NIZGlaQjdEcG1RbndUUVl4eXlkRnhlVi9LWXF5WkVPSzk5TFd4aTZTcysxYWp3ZGI0WEZsZW9uRER0R3JmaU9aRnFpY1o4VEF0cXV5OVk9PC9YNTA5Q2VydGlmaWNhdGU+PC9YNTA5RGF0YT48L0tleUluZm8+PC9kczpTaWduYXR1cmU+PHNhbWwyOlN1YmplY3Q+PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIiBOYW1lUXVhbGlmaWVyPSIiPmw3eHg1MjNkNjY4ZTVhM2M0ZTMzYjBmZTY2YTU0ZjkxZTI0ODwvc2FtbDI6TmFtZUlEPjxzYW1sMjpTdWJqZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJlYXJlciI+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdEJlZm9yZT0iMjAxNy0wOS0yOFQwODowNToxNy45MjlaIiBOb3RPbk9yQWZ0ZXI9IjIwMTctMDktMjhUMDg6MTI6MTcuOTI5WiIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE3LTA5LTI4VDA4OjA1OjE3LjkyOVoiIE5vdE9uT3JBZnRlcj0iMjAxNy0wOS0yOFQwODoxMjoxNy45MjlaIi8+PHNhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImNsaWVudF9pZCIgTmFtZUZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmF0dHJuYW1lLWZvcm1hdDp1bnNwZWNpZmllZCI+PHNhbWwyOkF0dHJpYnV0ZVZhbHVlPmw3eHg1MjNkNjY4ZTVhM2M0ZTMzYjBmZTY2YTU0ZjkxZTI0ODwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ0aW1lc3RhbXAiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dW5zcGVjaWZpZWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZT4yMDE3LTA5LTI4IDA4OjA3OjE3LjQzMjwvc2FtbDI6QXR0cmlidXRlVmFsdWU+PC9zYW1sMjpBdHRyaWJ1dGU+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJhY3QtYXMiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dW5zcGVjaWZpZWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZS8+PC9zYW1sMjpBdHRyaWJ1dGU+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJzdWJzY3JpYmVyX2lkIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OnVuc3BlY2lmaWVkIj48c2FtbDI6QXR0cmlidXRlVmFsdWU+T0lMLUJhY2tlbmRzPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImNvcnJlbGF0aW9uX2lkIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OnVuc3BlY2lmaWVkIj48c2FtbDI6QXR0cmlidXRlVmFsdWU+MmQ1NThlMmYtM2MxYi00YTU4LWI5YWEtZmEzZGRkYTYwZjI4PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9Imdyb3VwX25hbWUiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dW5zcGVjaWZpZWQiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZS8+PC9zYW1sMjpBdHRyaWJ1dGU+PC9zYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PC9zYW1sMjpBc3NlcnRpb24+</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ProcessRequestTransactionalInlineDataOnly" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${processCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1507269996000</longProp>
        <longProp name="ThreadGroup.end_time">1507285322000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">4</intProp>
          <stringProp name="throughput">${processRequestsThroughput}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process transactional inline data requests" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;sch:processFulfillmentRequest xmlns:sch=&quot;http://dms-fsl.uhc.com/fulfillment/schema&quot; xmlns:v7=&quot;http://enterprise.unitedhealthgroup.com/schema/canonical/base/common/v7_00&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&#xd;
   &lt;sch:fulfillmentRequest&gt;&#xd;
      &lt;sch:requestHeader&gt;&#xd;
         &lt;sch:requestID&gt;pt_pr_tid_${processRunUuid}_${__intSum(${__counter(false,processCounter)},${counterStartValue})}&lt;/sch:requestID&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:sourceID&gt;CIRRUS&lt;/sch:sourceID&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:destinationID&gt;SBS&lt;/sch:destinationID&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:requestDate&gt;2016-12-17T09:30:47Z&lt;/sch:requestDate&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:requestType&gt;Process&lt;/sch:requestType&gt;&#xd;
         &lt;sch:businessSegmentID&gt;EI&lt;/sch:businessSegmentID&gt;&#xd;
         &lt;sch:marketSegmentCd&gt;OXF&lt;/sch:marketSegmentCd&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:fulfillmentType&gt;10000&lt;/sch:fulfillmentType&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:requestCategory&gt;TransactionalInlineDataOnly&lt;/sch:requestCategory&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:serviceLevelCategory&gt;String&lt;/sch:serviceLevelCategory&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:dataFormat&gt;XML&lt;/sch:dataFormat&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:requestorRefNo&gt;UHG_EOB_112233&lt;/sch:requestorRefNo&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:supplierRefNo&gt;String&lt;/sch:supplierRefNo&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:bulkRequestHeaderID /&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;sch:docCompositionEngineID&gt;DC_COMP_ENGINE_001&lt;/sch:docCompositionEngineID&gt;&#xd;
      &lt;/sch:requestHeader&gt;&#xd;
      &lt;sch:requestDetail&gt;&#xd;
         &lt;!--You have a CHOICE of the next 2 items at this level--&gt;&#xd;
         &lt;sch:transactionalRequestDetail&gt;&#xd;
            &lt;!--0 to 20 repetitions:--&gt;&#xd;
            &lt;sch:recipient&gt;&#xd;
               &lt;sch:recipientId&gt;111223333&lt;/sch:recipientId&gt;&#xd;
               &lt;sch:idQualifier&gt;SocialSecIDType&lt;/sch:idQualifier&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:deliveryMethod1&gt;Emailed&lt;/sch:deliveryMethod1&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:deliveryMethod2&gt;&lt;/sch:deliveryMethod2&gt;&#xd;
               &lt;sch:recipientType&gt;MemberType&lt;/sch:recipientType&gt;&#xd;
               &lt;!--You have a CHOICE of the next 2 items at this level--&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:person&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:prefix&gt;Mr.&lt;/sch:prefix&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:firstName&gt;SampleFirstName&lt;/sch:firstName&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:middleName&gt;String&lt;/sch:middleName&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:lastName&gt;SampleLastName&lt;/sch:lastName&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:suffix&gt;Jr&lt;/sch:suffix&gt;&#xd;
               &lt;/sch:person&gt;&#xd;
               &lt;!--You have a CHOICE of the next 2 items at this level--&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:MailToAddress&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:Address1&gt;1001 Main Street&lt;/sch:Address1&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:Address2&gt;String&lt;/sch:Address2&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:Address3&gt;String&lt;/sch:Address3&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:City&gt;Main City&lt;/sch:City&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:State&gt;CA&lt;/sch:State&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:Zip&gt;999999&lt;/sch:Zip&gt;&#xd;
               &lt;/sch:MailToAddress&gt;&#xd;
               &lt;!--You have a CHOICE of the next 2 items at this level--&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:ReturnToAddress&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:Address1&gt;String&lt;/sch:Address1&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:Address2&gt;String&lt;/sch:Address2&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:Address3&gt;String&lt;/sch:Address3&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:City&gt;String&lt;/sch:City&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:State&gt;String&lt;/sch:State&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:Zip&gt;String&lt;/sch:Zip&gt;&#xd;
               &lt;/sch:ReturnToAddress&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:faxNumber&gt;String&lt;/sch:faxNumber&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:emailAddress&gt;SomeEmailAddress.com&lt;/sch:emailAddress&gt;&#xd;
               &lt;sch:carbonCopyInd&gt;false&lt;/sch:carbonCopyInd&gt;&#xd;
            &lt;/sch:recipient&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;sch:template&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:templateID&gt;EOBTemplateC12HD&lt;/sch:templateID&gt;&#xd;
              &#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:templateName&gt;EOBTemplateC12HD&lt;/sch:templateName&gt;&#xd;
            &lt;/sch:template&gt;&#xd;
            &lt;sch:data&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:externalFileType&gt;&#xd;
                  &lt;filePath/&gt;&#xd;
                  &lt;fileName/&gt;&#xd;
                  &lt;fileSize/&gt;&#xd;
               &lt;/sch:externalFileType&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:embeddedDataType&gt;&lt;/sch:embeddedDataType&gt;&#xd;
               &lt;!--Optional:--&gt;&#xd;
               &lt;sch:contentFormatType&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:contentStream /&gt;&#xd;
                  &lt;sch:documentType/&gt;&#xd;
                  &lt;!--Optional:--&gt;&#xd;
                  &lt;sch:mimeType /&gt;&#xd;
                  &lt;!--0 to 20 repetitions:--&gt;&#xd;
                  &lt;sch:documentMetadata&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;v7:name /&gt;&#xd;
                     &lt;!--Optional:--&gt;&#xd;
                     &lt;v7:value /&gt;&#xd;
                  &lt;/sch:documentMetadata&gt;&#xd;
               &lt;/sch:contentFormatType&gt;&#xd;
            &lt;/sch:data&gt;&#xd;
         &lt;/sch:transactionalRequestDetail&gt;&#xd;
      &lt;/sch:requestDetail&gt;&#xd;
      &lt;!--Optional:--&gt;&#xd;
      &lt;sch:requestTrailer&gt;&#xd;
         &lt;sch:requestItemCount&gt;1&lt;/sch:requestItemCount&gt;&#xd;
      &lt;/sch:requestTrailer&gt;&#xd;
   &lt;/sch:fulfillmentRequest&gt;&#xd;
&lt;/sch:processFulfillmentRequest&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/services/supplier/v2/processFulfillment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
          <stringProp name="Scope.variable"></stringProp>
        </ResponseAssertion>
        <hashTree/>
        <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="StatusAccepted" enabled="true">
          <boolProp name="XPath.negate">false</boolProp>
          <stringProp name="XPath.xpath">/acknowledgeMsg/acknowledge/validationResults/transactionLevelAck/transaction/transactionStatus/text()=&apos;Accepted&apos;</stringProp>
          <boolProp name="XPath.validate">false</boolProp>
          <boolProp name="XPath.whitespace">false</boolProp>
          <boolProp name="XPath.tolerant">false</boolProp>
          <boolProp name="XPath.namespace">false</boolProp>
        </XPathAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PostRequestTransactionalInlineDataOnly" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${postStatusCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1499342868000</longProp>
        <longProp name="ThreadGroup.end_time">1499342868000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">4</intProp>
          <stringProp name="throughput">${postStatusThroughput}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post Status Requests" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;sch:postFulfillmentRequestStatus xmlns:sch=&quot;http://dms-fsl.uhc.com/fulfillment/schema&quot; xmlns:v7=&quot;http://enterprise.unitedhealthgroup.com/schema/canonical/base/common/v7_00&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&#xd;
      &#xd;
              &lt;sch:fulfillmentRequestStatus&gt;&#xd;
                &lt;sch:requestHeader&gt;&#xd;
                    &lt;sch:requestID&gt;pt_pr_tid_${postArchiveRunUuid}_${__intSum(${__counter(false)},${counterStartValue},${postReqStartOffset})}&lt;/sch:requestID&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:sourceID&gt;CIRRUS&lt;/sch:sourceID&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:destinationID&gt;SBS&lt;/sch:destinationID&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:requestDate&gt;2016-12-17T09:30:47Z&lt;/sch:requestDate&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:requestType&gt;PostStatus&lt;/sch:requestType&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:businessSegmentID&gt;EI&lt;/sch:businessSegmentID&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:marketSegmentCd&gt;OXF&lt;/sch:marketSegmentCd&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:fulfillmentType&gt;10000&lt;/sch:fulfillmentType&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:requestCategory&gt;TransactionalInlineDataOnly&lt;/sch:requestCategory&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:serviceLevelCategory&gt;String&lt;/sch:serviceLevelCategory&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:dataFormat&gt;XML&lt;/sch:dataFormat&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:requestorRefNo&gt;UHG_EOB_112233&lt;/sch:requestorRefNo&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:supplierRefNo&gt;PS_REF_2016010112345&lt;/sch:supplierRefNo&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:bulkRequestHeaderID&gt;String&lt;/sch:bulkRequestHeaderID&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:docCompositionEngineID&gt;DC_COMP_ENGINE_001&lt;/sch:docCompositionEngineID&gt;&#xd;
                &lt;/sch:requestHeader&gt;&#xd;
                &lt;!--1 to 7 repetitions:--&gt;&#xd;
                &lt;sch:requestHistory&gt;&#xd;
                    &lt;sch:processor&gt;PRINT_SUPPLIER_2345&lt;/sch:processor&gt;&#xd;
                    &lt;sch:eventType&gt;Fulfilled&lt;/sch:eventType&gt;&#xd;
                    &lt;sch:receivedDate&gt;2001-12-17T09:31:47Z&lt;/sch:receivedDate&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:dispatchedDate&gt;2001-12-17T09:32:47Z&lt;/sch:dispatchedDate&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:recipientId&gt;111223333&lt;/sch:recipientId&gt;&#xd;
                    &lt;!--Optional:--&gt;&#xd;
                    &lt;sch:deliveryMethodCd&gt;Mailed&lt;/sch:deliveryMethodCd&gt;&#xd;
                    &lt;sch:statusCode&gt;Accepted&lt;/sch:statusCode&gt;&#xd;
                    &lt;sch:successCount&gt;1&lt;/sch:successCount&gt;&#xd;
                    &lt;sch:exceptionCount&gt;0&lt;/sch:exceptionCount&gt;&#xd;
                &lt;/sch:requestHistory&gt;&#xd;
                &lt;!--Optional:--&gt;&#xd;
                &lt;sch:requestTrailer&gt;&#xd;
                    &lt;sch:requestItemCount&gt;1&lt;/sch:requestItemCount&gt;&#xd;
                &lt;/sch:requestTrailer&gt;&#xd;
            &lt;/sch:fulfillmentRequestStatus&gt;&#xd;
          &lt;/sch:postFulfillmentRequestStatus&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/services/requestor/v2/postFulfillmentStatus</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
          <stringProp name="Scope.variable"></stringProp>
        </ResponseAssertion>
        <hashTree/>
        <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="StatusAccepted" enabled="true">
          <boolProp name="XPath.negate">false</boolProp>
          <stringProp name="XPath.xpath">/acknowledgeMsg/acknowledge/validationResults/transactionLevelAck/transaction/transactionStatus/text()=&apos;Accepted&apos;</stringProp>
          <boolProp name="XPath.validate">false</boolProp>
          <boolProp name="XPath.whitespace">false</boolProp>
          <boolProp name="XPath.tolerant">false</boolProp>
          <boolProp name="XPath.namespace">false</boolProp>
        </XPathAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FindFulfillmentHistory" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${findFulfillmentHistoryCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1506495220000</longProp>
        <longProp name="ThreadGroup.end_time">1506495220000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">4</intProp>
          <stringProp name="throughput">${findFulfillmentHistoryThroughput}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">accept</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Find Fulfillment History Requests" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;searchSourceID&quot;: &quot;CIRRUS&quot;,&#xd;
  &quot;requestID&quot;: &quot;pt_pr_tid_${fulfillmentHistoryUuid}_${__intSum(${__counter(false)},${counterStartValue})}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/services/supplier/v2/findFulfillmentHistory</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
          <stringProp name="Scope.variable"></stringProp>
        </ResponseAssertion>
        <hashTree/>
        <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="false">
          <boolProp name="XPath.negate">true</boolProp>
          <stringProp name="XPath.xpath">/fulfillmentHistoryResponse/responseExceptionDetail/errorCode</stringProp>
          <boolProp name="XPath.validate">false</boolProp>
          <boolProp name="XPath.whitespace">false</boolProp>
          <boolProp name="XPath.tolerant">false</boolProp>
          <boolProp name="XPath.namespace">false</boolProp>
        </XPathAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ArchiveRequestTransactionalInlineDataOnly" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${archiveCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1506495220000</longProp>
        <longProp name="ThreadGroup.end_time">1506497440000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">4</intProp>
          <stringProp name="throughput">${archiveThroughput}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Process Archive Requests" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;sch:processArchiveRequest xmlns:xs=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&#xd;
	xmlns:sch=&quot;http://dms-fsl.uhc.com/fulfillment/schema&quot;&#xd;
	xmlns:v7=&quot;http://enterprise.unitedhealthgroup.com/schema/canonical/base/common/v7_00&quot;&gt;&#xd;
	&lt;sch:archiveRequest&gt;&#xd;
		&lt;sch:archiveRequestHeader&gt;&#xd;
			&lt;sch:requestID&gt;pt_pr_tid_${postArchiveRunUuid}_${__intSum(${__counter(false,counterStartValue)},${archiveReqStartOffset})}&lt;/sch:requestID&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:sourceID&gt;CIRRUS&lt;/sch:sourceID&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:destinationID&gt;SBS&lt;/sch:destinationID&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:requestDate&gt;2001-12-17T09:30:47Z&lt;/sch:requestDate&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:requestType&gt;Archive&lt;/sch:requestType&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:businessSegmentID&gt;EI&lt;/sch:businessSegmentID&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:marketSegmentCd&gt;OXF&lt;/sch:marketSegmentCd&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:fulfillmentType&gt;10000&lt;/sch:fulfillmentType&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:requestCategory&gt;TransactionalInlineDataOnly&lt;/sch:requestCategory&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:serviceLevelCategory&gt;String&lt;/sch:serviceLevelCategory&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:dataFormat&gt;XML&lt;/sch:dataFormat&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:requestorRefNo&gt;REQ_MNB12&lt;/sch:requestorRefNo&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:supplierRefNo&gt;SUP_900098&lt;/sch:supplierRefNo&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:bulkRequestHeaderID&gt;String&lt;/sch:bulkRequestHeaderID&gt;&#xd;
			&lt;!--Optional: --&gt;&#xd;
			&lt;sch:docCompositionEngineID&gt;&lt;/sch:docCompositionEngineID&gt;&#xd;
		&lt;/sch:archiveRequestHeader&gt;&#xd;
		&lt;sch:archiveRequestDetail&gt;&#xd;
			&lt;!--You have a CHOICE of the next 2 items at this level --&gt;&#xd;
			&lt;sch:archiveTransactionalDetail&gt;&#xd;
				&lt;sch:data&gt;&#xd;
          &#xd;
				&lt;!--Optional: --&gt;&#xd;
          &#xd;
				&lt;sch:externalFileType&gt;&#xd;
            &#xd;
				&lt;!--Optional: --&gt;&#xd;
            &#xd;
				&lt;sch:filePath&gt;/MissionControl/SBS/&lt;/sch:filePath&gt;&#xd;
            &#xd;
				&lt;sch:fileName&gt;${archiveFileName}${__javaScript(${__counter(false)}%${archiveFileCount})}${archiveFileExtension}&lt;/sch:fileName&gt;&#xd;
            &#xd;
				&lt;sch:fileSize&gt;9999&lt;/sch:fileSize&gt;&#xd;
          &#xd;
				&lt;/sch:externalFileType&gt;&#xd;
          &#xd;
				&lt;!--Optional: --&gt;&#xd;
          &#xd;
				&lt;sch:embeddedDataType&gt;&lt;/sch:embeddedDataType&gt;&#xd;
          &#xd;
				&lt;!--Optional: --&gt;&#xd;
          &#xd;
				&lt;sch:contentFormatType&gt;&#xd;
            &#xd;
				&lt;!--Optional: --&gt;&#xd;
            &#xd;
				&lt;sch:contentStream /&gt;&#xd;
            &#xd;
				&lt;sch:documentType&gt;u_uhg_acet&lt;/sch:documentType&gt;&#xd;
            &#xd;
				&lt;!--Optional: --&gt;&#xd;
            &#xd;
				&lt;sch:mimeType&gt;mime&lt;/sch:mimeType&gt;&#xd;
            &#xd;
				&lt;!--0 to 20 repetitions: --&gt;&#xd;
            &#xd;
				&lt;sch:documentMetadata&gt;&#xd;
              &#xd;
				&lt;!--Optional: --&gt;&#xd;
              &#xd;
				&lt;v7:name&gt;u_dt&lt;/v7:name&gt;&#xd;
              &#xd;
				&lt;!--Optional: --&gt;&#xd;
              &#xd;
				&lt;v7:value&gt;2017-10-04&lt;/v7:value&gt;&#xd;
            &#xd;
				&lt;/sch:documentMetadata&gt;&#xd;
          &#xd;
				&lt;/sch:contentFormatType&gt;&#xd;
        &#xd;
			&lt;/sch:data&gt;&#xd;
			&lt;/sch:archiveTransactionalDetail&gt;&#xd;
		&lt;/sch:archiveRequestDetail&gt;&#xd;
		&lt;!--Optional: --&gt;&#xd;
		&lt;sch:requestTrailer&gt;&#xd;
			&lt;sch:requestItemCount&gt;1&lt;/sch:requestItemCount&gt;&#xd;
		&lt;/sch:requestTrailer&gt;&#xd;
	&lt;/sch:archiveRequest&gt;&#xd;
&lt;/sch:processArchiveRequest&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/services/supplier/v2/processArchive</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
          <stringProp name="RegexExtractor.refname">msgIdentifier</stringProp>
          <stringProp name="RegexExtractor.regex">&lt;msgIdentifier&gt;(.+?)&lt;/msgIdentifier&gt;</stringProp>
          <stringProp name="RegexExtractor.template">$1$</stringProp>
          <stringProp name="RegexExtractor.default"></stringProp>
          <stringProp name="RegexExtractor.match_number">1</stringProp>
        </RegexExtractor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
          <stringProp name="Scope.variable"></stringProp>
        </ResponseAssertion>
        <hashTree/>
        <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="StatusAccepted" enabled="true">
          <boolProp name="XPath.negate">false</boolProp>
          <stringProp name="XPath.xpath">/acknowledgeMsg/acknowledge/validationResults/transactionLevelAck/transaction/transactionStatus/text()=&apos;Accepted&apos;</stringProp>
          <boolProp name="XPath.validate">false</boolProp>
          <boolProp name="XPath.whitespace">false</boolProp>
          <boolProp name="XPath.tolerant">false</boolProp>
          <boolProp name="XPath.namespace">false</boolProp>
        </XPathAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CancelRequestTransactionalInlineDataOnly" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${cancelReqCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1506495220000</longProp>
        <longProp name="ThreadGroup.end_time">1506495220000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">4</intProp>
          <stringProp name="throughput">${cancelReqThroughput}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cancel Requests" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;sch:cancelFulfillmentRequest xmlns:sch=&quot;http://dms-fsl.uhc.com/fulfillment/schema&quot; xmlns:v7=&quot;http://enterprise.unitedhealthgroup.com/schema/canonical/base/common/v7_00&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;&#xd;
&#xd;
        &lt;sch:cancelRequestHeader&gt;&#xd;
 &#xd;
          &lt;sch:requestID&gt;pt_pr_tid_${cancelRunUuid}_${__intSum(${__counter(false,counterStartValue)},${cancelReqStartOffset})}&lt;/sch:requestID&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:sourceID&gt;CIRRUS&lt;/sch:sourceID&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:destinationID&gt;SBS&lt;/sch:destinationID&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:requestDate&gt;2016-12-17T09:30:47Z&lt;/sch:requestDate&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:requestType&gt;Cancel&lt;/sch:requestType&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:businessSegmentID&gt;EI&lt;/sch:businessSegmentID&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:marketSegmentCd&gt;OXF&lt;/sch:marketSegmentCd&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:fulfillmentType&gt;10000&lt;/sch:fulfillmentType&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:requestCategory&gt;TransactionalInlineDataOnly&lt;/sch:requestCategory&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:serviceLevelCategory&gt;String&lt;/sch:serviceLevelCategory&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:dataFormat&gt;XML&lt;/sch:dataFormat&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:requestorRefNo&gt;REQ_REFNO_9876&lt;/sch:requestorRefNo&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:supplierRefNo&gt;String&lt;/sch:supplierRefNo&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:bulkRequestHeaderID&gt;String&lt;/sch:bulkRequestHeaderID&gt;&#xd;
 &#xd;
          &lt;!--Optional:--&gt;&#xd;
 &#xd;
          &lt;sch:docCompositionEngineID&gt;&lt;/sch:docCompositionEngineID&gt;&#xd;
 &#xd;
        &lt;/sch:cancelRequestHeader&gt;&#xd;
    &lt;/sch:cancelFulfillmentRequest&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/services/supplier/v2/cancelFulfillment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
          <stringProp name="RegexExtractor.useHeaders">false</stringProp>
          <stringProp name="RegexExtractor.refname">msgIdentifier</stringProp>
          <stringProp name="RegexExtractor.regex">&lt;msgIdentifier&gt;(.+?)&lt;/msgIdentifier&gt;</stringProp>
          <stringProp name="RegexExtractor.template">$1$</stringProp>
          <stringProp name="RegexExtractor.default"></stringProp>
          <stringProp name="RegexExtractor.match_number">1</stringProp>
        </RegexExtractor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
          <stringProp name="Scope.variable"></stringProp>
        </ResponseAssertion>
        <hashTree/>
        <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="StatusAccepted" enabled="true">
          <boolProp name="XPath.negate">false</boolProp>
          <stringProp name="XPath.xpath">/acknowledgeMsg/acknowledge/validationResults/transactionLevelAck/transaction/transactionStatus/text()=&apos;Accepted&apos;</stringProp>
          <boolProp name="XPath.validate">false</boolProp>
          <boolProp name="XPath.whitespace">false</boolProp>
          <boolProp name="XPath.tolerant">false</boolProp>
          <boolProp name="XPath.namespace">false</boolProp>
        </XPathAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Search Requests" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${searchCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1507935688000</longProp>
        <longProp name="ThreadGroup.end_time">1507935688000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Run Only once for login" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTPLogin Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="userName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">nkasat</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">userName</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">nkcs2017!</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/login/authentication</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">ACCESS_TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">ACCESS_TOKEN=(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="ACCESS_TOKEN" elementType="Cookie" testname="ACCESS_TOKEN">
              <stringProp name="Cookie.value">${accessToken}</stringProp>
              <stringProp name="Cookie.domain">.uhg.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">2</intProp>
          <stringProp name="throughput">${searchRequestsThroughput}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Request By Request Id" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="searchCriteria" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">{&quot;size&quot;:20,&quot;from&quot;:0,&quot;sort&quot;:[{&quot;request_date&quot;:{&quot;order&quot;:&quot;desc&quot;}}],&quot;query&quot;:{&quot;query_string&quot;:{&quot;default_operator&quot;:&quot;AND&quot;,&quot;analyze_wildcard&quot;:true,&quot;query&quot;:&quot;request_id_txt:pt_pr_tid_${postArchiveRunUuid}_${__intSum(${__counter(false)},${counterStartValue})}&quot;}}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">searchCriteria</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/services/v1/search</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="false">
          <stringProp name="JSON_PATH">$.hits.total</stringProp>
          <stringProp name="EXPECTED_VALUE">1</stringProp>
          <boolProp name="JSONVALIDATION">true</boolProp>
          <boolProp name="EXPECT_NULL">false</boolProp>
          <boolProp name="INVERT">false</boolProp>
          <boolProp name="ISREGEX">true</boolProp>
        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\apps\performance-tests\results\combined-runs\251017\1\combined-run\results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\apps\performance-tests\results\combined-runs\251017\1\combined-run-1\results.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
